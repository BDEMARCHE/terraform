name: Terraform CI
run-name: Deploy by @${{ github.actor }}
on:
  push:
    branches:
      - main
      
env:
  ORGANIZATION: "M2I"
  
jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: starting by checkout
        uses: actions/checkout@v4

  job2:
    runs-on: ubuntu-latest
    outputs:
      terraformdisplay: ${{ steps.setpdisplay.output.test }}
    steps:
      - id: stepdisplay
      - name: get terraform details and not capture output
        uses: sarathkrish/invoke-terraform-run-api@v1.0
        with:
          workSpaceName: "terraform"
          organizationName: ${{ env.ORGANIZATION }}
          terraformToken: ${{ secrets.TERRAFORM_TOKEN }}
          terraformHost: "app.terraform.io"
          isDestroy: false
          message: 'GitHub Actions'

#            echo "Run sarathkrish/invoke-terraform-run-api@v1.0"
#            echo "  with:"
#            echo "    workSpaceName: terraform"
#            echo "    organizationName: ${{ env.ORGANIZATION }}"
#            echo "    terraformToken: ***"
#            echo "    terraformHost: app.terraform.io"
#            echo "    isDestroy: false"
#            echo "    message: GitHub Actions"
#            echo "  env:"
#            echo "    ORGANIZATION: ${{ env.ORGANIZATION }}"
#  job3:
#    runs-on: ubuntu-latest
#    
#    steps:
#      - name: Run Terraform API Command and Capture Output
#        id: run-terraform-api
#        run: |
#          {
#            run_output=$(uses: sarathkrish/invoke-terraform-run-api@v1.0 \
#              --workSpaceName terraform \
#              --organizationName ${{ env.ORGANIZATION }} \
#              --terraformToken ${{ secrets.TERRAFORM_TOKEN }} \
#              --terraformHost app.terraform.io \
#              --isDestroy false \
#              --message 'GitHub Actions')
#            echo "$run_output"
#          } 2>&1 | tee output.log
  job3:
    runs-on: ubuntu-latest
    needs: job2
    steps:
      - name: Run Terraform API Command and Capture Output
        id: terraform-api-output
      - env:
          MYJSON: ${{ needs.job2.outputs.terraformdisplay }}
          run: echo "$MYJSON" > output.log
  job4: 
    runs-on: ubuntu-latest
    needs: job3
    steps:
      - name: Upload Terraform API Command Output
        uses: actions/upload-artifact@v3
        with:
          name: terraform-api-output
          path: output.log
          
  job5: 
    runs-on: ubuntu-latest
    steps:
      - name: Using hashicoorp terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}
          
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
  
      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: terraform workspace show
        run: terraform workspace show
          
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
  
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
      
 #     - name: Terraform Apply
 #       id: apply
 #       run: terraform apply -auto-approve
